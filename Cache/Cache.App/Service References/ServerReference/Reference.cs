//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cache.WPF.ServerReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileCurrentVersionStatus", Namespace="http://schemas.datacontract.org/2004/07/Server.Service")]
    public enum FileCurrentVersionStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UpToDate = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Modified = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Removed = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CachedChunkDto", Namespace="http://schemas.datacontract.org/2004/07/Server.Service.Dtos")]
    [System.SerializableAttribute()]
    public partial class CachedChunkDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long CachedFileChunkLocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ChunkHashField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long CachedFileChunkLocation {
            get {
                return this.CachedFileChunkLocationField;
            }
            set {
                if ((this.CachedFileChunkLocationField.Equals(value) != true)) {
                    this.CachedFileChunkLocationField = value;
                    this.RaisePropertyChanged("CachedFileChunkLocation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ChunkHash {
            get {
                return this.ChunkHashField;
            }
            set {
                if ((object.ReferenceEquals(this.ChunkHashField, value) != true)) {
                    this.ChunkHashField = value;
                    this.RaisePropertyChanged("ChunkHash");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DifferenceChunkDto", Namespace="http://schemas.datacontract.org/2004/07/Server.Service.Dtos")]
    [System.SerializableAttribute()]
    public partial class DifferenceChunkDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long CachedFileChunkNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ChunkInformationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long CurentFileChunkNumberField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long CachedFileChunkNumber {
            get {
                return this.CachedFileChunkNumberField;
            }
            set {
                if ((this.CachedFileChunkNumberField.Equals(value) != true)) {
                    this.CachedFileChunkNumberField = value;
                    this.RaisePropertyChanged("CachedFileChunkNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] ChunkInformation {
            get {
                return this.ChunkInformationField;
            }
            set {
                if ((object.ReferenceEquals(this.ChunkInformationField, value) != true)) {
                    this.ChunkInformationField = value;
                    this.RaisePropertyChanged("ChunkInformation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long CurentFileChunkNumber {
            get {
                return this.CurentFileChunkNumberField;
            }
            set {
                if ((this.CurentFileChunkNumberField.Equals(value) != true)) {
                    this.CurentFileChunkNumberField = value;
                    this.RaisePropertyChanged("CurentFileChunkNumber");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServerReference.IServerService")]
    public interface IServerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerService/GetFileNames", ReplyAction="http://tempuri.org/IServerService/GetFileNamesResponse")]
        string[] GetFileNames();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerService/GetFileNames", ReplyAction="http://tempuri.org/IServerService/GetFileNamesResponse")]
        System.Threading.Tasks.Task<string[]> GetFileNamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerService/DownloadFile", ReplyAction="http://tempuri.org/IServerService/DownloadFileResponse")]
        System.IO.Stream DownloadFile(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerService/DownloadFile", ReplyAction="http://tempuri.org/IServerService/DownloadFileResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> DownloadFileAsync(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerService/IsCurrentVersionOfFile", ReplyAction="http://tempuri.org/IServerService/IsCurrentVersionOfFileResponse")]
        Cache.WPF.ServerReference.FileCurrentVersionStatus IsCurrentVersionOfFile(string fileName, string hashOfCachedFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerService/IsCurrentVersionOfFile", ReplyAction="http://tempuri.org/IServerService/IsCurrentVersionOfFileResponse")]
        System.Threading.Tasks.Task<Cache.WPF.ServerReference.FileCurrentVersionStatus> IsCurrentVersionOfFileAsync(string fileName, string hashOfCachedFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerService/GetUpdatedChunks", ReplyAction="http://tempuri.org/IServerService/GetUpdatedChunksResponse")]
        Cache.WPF.ServerReference.DifferenceChunkDto[] GetUpdatedChunks(string fileName, Cache.WPF.ServerReference.CachedChunkDto[] cahceChunks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerService/GetUpdatedChunks", ReplyAction="http://tempuri.org/IServerService/GetUpdatedChunksResponse")]
        System.Threading.Tasks.Task<Cache.WPF.ServerReference.DifferenceChunkDto[]> GetUpdatedChunksAsync(string fileName, Cache.WPF.ServerReference.CachedChunkDto[] cahceChunks);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServerServiceChannel : Cache.WPF.ServerReference.IServerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServerServiceClient : System.ServiceModel.ClientBase<Cache.WPF.ServerReference.IServerService>, Cache.WPF.ServerReference.IServerService {
        
        public ServerServiceClient() {
        }
        
        public ServerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] GetFileNames() {
            return base.Channel.GetFileNames();
        }
        
        public System.Threading.Tasks.Task<string[]> GetFileNamesAsync() {
            return base.Channel.GetFileNamesAsync();
        }
        
        public System.IO.Stream DownloadFile(string fileName) {
            return base.Channel.DownloadFile(fileName);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> DownloadFileAsync(string fileName) {
            return base.Channel.DownloadFileAsync(fileName);
        }
        
        public Cache.WPF.ServerReference.FileCurrentVersionStatus IsCurrentVersionOfFile(string fileName, string hashOfCachedFile) {
            return base.Channel.IsCurrentVersionOfFile(fileName, hashOfCachedFile);
        }
        
        public System.Threading.Tasks.Task<Cache.WPF.ServerReference.FileCurrentVersionStatus> IsCurrentVersionOfFileAsync(string fileName, string hashOfCachedFile) {
            return base.Channel.IsCurrentVersionOfFileAsync(fileName, hashOfCachedFile);
        }
        
        public Cache.WPF.ServerReference.DifferenceChunkDto[] GetUpdatedChunks(string fileName, Cache.WPF.ServerReference.CachedChunkDto[] cahceChunks) {
            return base.Channel.GetUpdatedChunks(fileName, cahceChunks);
        }
        
        public System.Threading.Tasks.Task<Cache.WPF.ServerReference.DifferenceChunkDto[]> GetUpdatedChunksAsync(string fileName, Cache.WPF.ServerReference.CachedChunkDto[] cahceChunks) {
            return base.Channel.GetUpdatedChunksAsync(fileName, cahceChunks);
        }
    }
}
